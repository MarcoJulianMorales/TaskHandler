@using Microsoft.AspNetCore.Mvc.Localization;
@inject IViewLocalizer localizer

@{
    ViewData["Title"] = "Tasks list";
}

<div class="text-center">
    <h1 class="display-4">@localizer["My tasks"]</h1>
    <button type="button" class="btn btn-primary mb-3" onclick="addNewTask()">
        @localizer["Add new task"]
    </button>
</div>

<div id="tasks-list-container" class="text-center">
    <div id="reordenable" class="text-start" data-bind="foreach: tasks">
        <div name="task" class="border mb-2 p-2" style="cursor:pointer" data-bind="click: TaskClickHandler">
            <div data-bind="text: Title, hidden:isNew" class="fw-bold">

            </div>

            <div name="steps-resume" data-bind="visible:totalSteps() > 0">
                <span data-bind="text: doneSteps"></span>/<span data-bind="text: totalSteps"></span>
                <span data-bind="text: donePercentaje"></span>
            </div>

            <input type="text" name="Title-task" autocomplete="off"
            data-bind="value:Title, visible: isNew, attr:{'data-id':id}, event:{focusout: focusoutTaskTitle}" />
        </div>
    </div>

    <div data-bind="visible:loading" class="spinner-border">
        <span class="visually-hidden">Loading...</span>
    </div>

    <div data-bind="visible:noTasks">
        No tasks to show
    </div>

</div>

<partial name="_EditTaskModal" />

@section Scripts {
    <script src="~/js/Tasks.js" asp-append-version="true"></script>
    <script src="~/js/Utilities.js" asp-append-version="true"></script>
    <script src="~/js/Steps.js" asp-append-version="true"></script>
    <script src="~/js/Attached-Files.js" asp-append-version="true"></script>

    <script>

        const urlTasks = '/api/Tasks';
        const urlSteps = '/api/Steps';
        const urlFiles = '/api/files';

        const EditTaskModal = document.getElementById('edit-task-modal');
        const EditTaskModalBootstrap = new bootstrap.Modal(EditTaskModal);

        function TasksListDTOfn () {
            var self = this;
            self.tasks = ko.observableArray([]);
            self.loading = ko.observable(true);

            self.noTasks = ko.pureComputed(function(){
                if(self.loading()){
                    return false;
                }
                return self.tasks().length === 0;
            })
        }

        function TasksElementListDTO({id, title, totalSteps, doneSteps}){
            var self = this;
            self.id = ko.observable(id);
            self.Title = ko.observable(title);

            self.totalSteps = ko.observable(totalSteps);
            self.doneSteps = ko.observable(doneSteps);

            self.isNew = ko.pureComputed(function () {
                return self.id() == 0;
            })

            self.donePercentaje = ko.pureComputed(function () {
                const calc = Math.round(self.doneSteps() * 1.0 / self.totalSteps() *100);

                return `(${calc}%)`;
            })
        }

        const TaskEditVM = {
            id: 0,
            title: ko.observable(''),
            description: ko.observable(''),
            steps: ko.observableArray([]),
            attachedFiles: ko.observableArray([])
        }

        const TasksListDTO = new TasksListDTOfn();

        function StepViewModel({ id, description, done, editMode }) {
            var self = this;
            self.id = ko.observable(id || 0);
            self.description = ko.observable(description || '');
            self.prevDescription = '';
            self.done = ko.observable(done);
            self.editMode = ko.observable(editMode);

            self.isNew = ko.pureComputed(function(){
                return self.id() == 0;
            })
        }

        function attachedFileVM({ id, tittle, published, editMode, orden, url }){
            var self = this;
            self.id = id;
            self.title = ko.observable(tittle || '');
            self.published = published;
            self.editMode = ko.observable(editMode);
            self.orden = orden;
            self.url = url;
        }

        getTasks();

        ko.applyBindings(TasksListDTO, document.getElementById('tasks-list-container'));
        ko.applyBindings(TaskEditVM, document.getElementById('edit-task-modal'));
    </script>
}